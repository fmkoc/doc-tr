<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: haluk Status: ready -->
<reference xml:id="class.iteratoraggregate" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>IteratorAggregate Arayüzü</title>
 <titleabbrev>IteratorAggregate</titleabbrev>

 <partintro>

<!-- {{{ IteratorAggregate intro -->
  <section xml:id="iteratoraggregate.intro">
   &reftitle.intro;
   <para>
    Harici bir yineleyici oluşturmak için arayüz.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="iteratoraggregate.synopsis">
   &reftitle.interfacesynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="interface">
    <oointerface>
     <interfacename>IteratorAggregate</interfacename>
    </oointerface>

    <oointerface>
     <modifier>extends</modifier>
     <interfacename>Traversable</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.iteratoraggregate')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='IteratorAggregate'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="iteratoraggregate.examples">
   &reftitle.examples;
   <example xml:id="iteratoraggregate.example.basic"><!-- {{{ -->
    <title>- Temel kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php

class Verilerim implements IteratorAggregate
{
    public $özellik1 = "Birinci genel özellik";
    public $özellik2 = "İkinci genel özellik";
    public $özellik3 = "Üçüncü genel özellik";
    public $özellik4 = "";

    public function __construct()
    {
        $this->özellik4 = "son özellik";
    }

/* PHP, tr_TR yerelinde bu yöntemi de arıyor, yoksa
 * "Fatal error: Couldn't find implementation for method
 * Verilerim::getiterator in Unknown on line 0"
 * hatasını veriyor.
 */
    public function getiterator()
    {
        return new ArrayIterator($this);
    }

    public public function getIterator(): Traversable
    {
        return new ArrayIterator($this);
    }
}

$obj = new Verilerim();

foreach ($obj as $key => $value) {
    var_dump($key, $value);
    echo "\n";
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(9) "özellik1"
string(22) "Birinci genel özellik"

string(9) "özellik2"
string(22) "İkinci genel özellik"

string(9) "özellik3"
string(25) "Üçüncü genel özellik"

string(9) "özellik4"
string(12) "son özellik"
]]>
    </screen>
   </example><!-- }}} -->
  </section>


 </partintro>

 &language.predefined.iteratoraggregate.getiterator;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
