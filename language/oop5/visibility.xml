<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7d7b378abd302430b8ce7cedb4b78c7033f5e88c Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Görünürlük</title>
  <para>
    Bir özelliğin ya da bir yöntemin (PHP 7.1.0 ve sonrası) görünürlüğü,
    bildirim sırasında önüne şu anahtar sözcüklerden biri getirilerek
    belirlenebilir:
    <literal>public</literal>, <literal>protected</literal> ya da
    <literal>private</literal>.
    <command>public</command> olarak bildirilmiş özelliklere ve yöntemlere her
    yerden erişilebilir. <command>protected</command> bildirimli özelliklere ve
    yöntemlere sadece tanımlandığı sınıfdan, ebeveyn sınıflardan ve miras
    alınarak <command>private</command> bildirimli özelliklere ve yöntemlere
    ise sadece özelliğin tanımlandığı sınıfın içinden erişilebilir.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Özelliklerin Görünürlüğü</title>
   <para>
    Sınıf özellikleri <literal>public</literal>, <literal>protected</literal>
    ya da <literal>private</literal> olarak tanımlanabilir.
    Görünürlük belirtilmeden bildirilen özelliklerin görünürlüğünün
    <literal>public</literal> olduğu varsayılır.
   </para>
   <example>
    <title>- Özellik bildirimi</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Sınıfım tanımı
 */
class Sınıfım
{
    public $genel = 'Genel';
    protected $korumalı = 'Korumalı';
    private $özel = 'Özel';

    function selamVer()
    {
        echo $this->genel;
        echo $this->korumalı;
        echo $this->özel;
    }
}

$nesne = new Sınıfım();
echo $nesne->genel;    // Çalışır
echo $nesne->korumalı; // Ölümcül Hata
echo $nesne->özel;     // Ölümcül Hata
$nesne->selamVer();    // Genel, Korumalı ve Özel görüntüler


/**
 * ÖbürSınıfım tanımı
 */
class ÖbürSınıfım extends Sınıfım
{
    // public ve protected özellikleri yeniden tanımlayabiliriz,
    // ancak private olanlar tanımlanamaz
    public $genel = 'Genel2';
    protected $korumalı = 'Öbür korumalı';

    function selamVer()
    {
        echo $this->genel;
        echo $this->korumalı;
        echo $this->özel;
    }
}

$nesne2 = new ÖbürSınıfım();
echo $nesne2->genel;    // Çalışır
echo $nesne2->korumalı; // Ölümcül Hata
echo $nesne2->özel;     // Tanımsız

$nesne2->selamVer();    // Genel2, Öbür korumalı ve Undefined görüntülenir

?>
]]>
    </programlisting>
   </example>
   <sect3 xml:id="language.oop5.visibility-members-aviz">
    <title>Bakışımsız Özellik Görünürlüğü</title>
    <simpara>
     PHP 8.4'ten itibaren, özelliklerin görünürlükleri bakışımsız olarak
     ayarlanabilir, okuma (<literal>get</literal>) ve yazma
     (<literal>set</literal>) için farklı kapsamlar olabilir. Özellikle,
     <literal>set</literal> görünürlüğü, öntanımlı görünürlükten daha izin
     verici olmadığı sürece ayrı olarak belirtilebilir.
    </simpara>
    <example>
     <title>- Bakışımsız Özellik Görünürlüğü</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    public function __construct(
        public private(set) string $title,
        public protected(set) string $author,
        protected private(set) int $pubYear,
    ) {}
}

class SpecialBook extends Book
{
    public function update(string $author, int $year): void
    {
        $this->author = $author; // OK
        $this->pubYear = $year; // Onulmaz Hata
    }
}

$b = new Book('How to PHP', 'Peter H. Peterson', 2024);

echo $b->title; // Çalışır
echo $b->author; // Çalışır
echo $b->pubYear; // Onulmaz Hata

$b->title = 'How not to PHP'; // Onulmaz Hata
$b->author = 'Pedro H. Peterson'; // Onulmaz Hata
$b->pubYear = 2023; // Onulmaz Hata
?>
]]>
    </programlisting>
   </example>
    <para>Bakışımsız görünürlükle ilgili birkaç uyarı var:</para>
    <itemizedlist>
     <listitem>
      <simpara>
       Yalnızca yazılan özelliklerin ayrı bir <literal>set</literal>
       görünürlüğü olabilir.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>set</literal> görünürlüğü <literal>get</literal> ile aynı
       veya daha kısıtlayıcı olmalıdır. Yani,
       <code>public protected(set)</code> ve
       <code>protected protected(set)</code> kullanımına izin verilir,
       ancak <code>protected public(set)</code> bir sözdizimi hatasına
       neden olur.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Bir özellik <literal>public</literal> ise, ana görünürlük atlanabilir.
       Yani, <code>public private(set)</code> ve <code>private(set)</code>
       aynı sonucu verecektir.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>private(set)</literal> görünürlüğüne sahip bir özellik
       otomatik olarak <literal>final</literal> olur ve bir alt sınıfta
       yeniden bildirilemez.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Bir özelliğe başvurulmasını sağlamak <literal>set</literal>
       görünürlüğünü takip eder, <literal>get</literal>'i değil.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Benzer şekilde, bir dizi özelliğine yazmaya çalışmak hem dahili
       olarak <literal>get</literal> hem de <literal>set</literal> işlemini
       içerir ve bu nedenle her zaman daha kısıtlayıcı olan
       <literal>set</literal> görünürlüğünü takip eder.
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
     Bir sınıf başka bir sınıfı genişlettiğinde, alt sınıf
     <literal>final</literal> olmayan herhangi bir özelliği yeniden tanımlayabilir. Bunu yaparken, yeni görünürlük ana sınıfla aynı veya
     ondan daha geniş olduğu sürece, ana görünürlüğü veya
     <literal>set</literal> görünürlüğünü genişletebilir. Ancak, bir
     <literal>private</literal> özelliği geçersiz kılınırsa, aslında ana
     sınıfın özelliğinin değiştirilmediği, ancak farklı bir dahili isme
     sahip yeni bir özellik oluşturduğu unutulmamalıdır.
    </simpara>
    <example>
     <title>- Bakışımsız Özellik Kalıtımı</title>
     <programlisting role="php">
<![CDATA[
<?php
class Book
{
    protected string $title;
    public protected(set) string $author;
    protected private(set) int $pubYear;
}

class SpecialBook extends Book
{
    public protected(set) $title; // OK, çünkü okumak daha geniş, yazmak ise aynı.
    public string $author; // OK, çünkü okumak aynı, yazmak ise daha geniş.
    public protected(set) int $pubYear; // Onulmaz hata. private(set) özellikler finaldir.
}
?>
]]>
     </programlisting>
    </example>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Yöntem Görünürlüğü</title>
   <para>
    Sınıf yöntemleri <literal>public</literal>, <literal>protected</literal>
    ya da <literal>private</literal> olarak tanımlanmalıdır. Bunlardan
    herhangi biri kullanılmadan yapılmış yöntem tanımlarının
    <literal>public</literal> kullanılarak yapıldığı varsayılır.
   </para>
   <example>
    <title>- Yöntem bildirimi</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Sınıfım tanımı
 */
class Sınıfım
{
    // public kurucu bildirimi
    public function __construct() { }

    // public yöntem bildirimi
    public function Genel() { }

    // protected yöntem bildirimi
    protected function Korumalı() { }

    // private yöntem bildirimi
    private function Özel() { }

    // Bu da public bir yöntem
    function Falanca()
    {
        $this->Genel();
        $this->Korumalı();
        $this->Özel();
    }
}

$sınıfım = new Sınıfım;
$sınıfım->Genel();    // Çalışır
$sınıfım->Korumalı(); // Ölümcül Hata
$sınıfım->Özel();     // Ölümcül Hata
$sınıfım->Falanca();  // Public, Protected ve Private çalışır


/**
 * ÖbürSınıfım tanımı
 */
class ÖbürSınıfım extends Sınıfım
{
    // Bu public bir yöntemdir
    function Filanca()
    {
        $this->Genel();
        $this->Korumalı();
        $this->Özel();  // Ölümcül Hata
    }
}

$öbürSınıfım = new Sınıfım;
$öbürSınıfım->Genel();   // Çalışır
$öbürSınıfım->Filanca(); // Genel ve Korumalı çalışır, Özel çalışmaz

class Bar
{
    public function dnm() {
        $this->dnmÖzel();
        $this->dnmGenel();
    }

    public function dnmGenel() {
        echo "Bar::dnmGenel\n";
    }

    private function dnmÖzel() {
        echo "Bar::dnmÖzel\n";
    }
}

class Foo extends Bar
{
    public function dnmGenel() {
        echo "Foo::dnmGenel\n";
    }

    private function dnmÖzel() {
        echo "Foo::dnmÖzel\n";
    }
}

$fo = new Foo();
$fo->dnm();  // Bar::dnmÖzel
             // Foo::dnmGenel

?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-constants">
   <title>Sabit Görünürlüğü</title>
   <para>
    PHP 7.1.0 ve sonrasında, sınıf sabitleri public, private veya
    protected olarak tanımlanabilir. Bu sözcükler olmaksızın tanımlanmış
    sabitlerin public olarak tanımlandıkları varsayılır.
   </para>
   <example>
    <title>- PHP 7.1.0 ve sonrasında sabit bildirimleri</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Tanımla: MyClass
 */
class MyClass
{
    // public sabit bildirimi
    public const MY_PUBLIC = 'genel';

    // protected  sabit bildirimi
    protected const MY_PROTECTED = 'korumalı';

    // private  sabit bildirimi
    private const MY_PRIVATE = 'özel';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // Çalışır
MyClass::MY_PROTECTED; // Ölümcül hata
MyClass::MY_PRIVATE; // Ölümcül hata
$myclass->foo(); // genel, korumalı ve özel çalışır


/**
 * Tanımla: MyClass2
 */
class MyClass2 extends MyClass
{
    // public
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Ölümcül hata
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // Çalışır
$myclass2->foo2(); // genel ve korumalı çalışır, özel çalışmaz
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Diğer nesnelerden görünürlük</title>
   <para>
    Aynı türdeki nesneler, aynı örnekler olmasalar bile, diğerlerinin özel ve
    korunan üyelerine erişime sahip olacaktır. Bunun sebebi, gerçeklenime özgü
    ayrıntıların bu nesnelerin içindeyken zaten biliniyor olmasıdır.
   </para>
   <example>
    <title>- Aynı nesne türündeki özel üyelere erişim</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Private yönteme erişildi.';
    }

    public function baz(Test $other)
    {
        // private özelliği değiştirilebilir:
        $other->foo = 'hello';
        var_dump($other->foo);

        // private yöntemi de çağırılabilir:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "hello"
Private yönteme erişildi.
]]>
    </screen>
   </example>
  </sect2>

  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
