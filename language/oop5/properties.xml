<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f94d903985119d3ac00f4528551df947f57b667f Maintainer: nilgun Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Özellikler</title>

  <para>
   Sınıf üyesi değişkenlere <emphasis>özellik</emphasis> denir. Bunlara
   bazan <emphasis>öznitelik</emphasis> veya <emphasis>alan</emphasis>
   dendiği de olur, fakat bu kılavuzun amaçları doğrultusunda
   biz <emphasis>özellik</emphasis> terimini kullanacağız.
   PHP 7.4 itibariyle, özellikler normal değişken bildiriminin önüne isteğe
   bağlı (<xref linkend="language.oop5.visibility"/> sözcüklerinden biri,
   <link linkend="language.oop5.static"/> veya PHP 8.1.0 itibariyle
   <link linkend="language.oop5.properties.readonly-properties">readonly</link>
   gibi) bir değiştirici ve ardından isteğe bağlı bir tür belirtimi getirilerek
   bildirilir. Bu bildirim, bir ilklendirme olarak da yapılabilir; bu durumda
   <link linkend="language.constants">sabit</link> bir değerle ilklendirme
   yapılmalıdır.
  </para>
  <note>
   <para>
    Sınıf özelliklerini bildirmenin artık kullanılmayan bir yolu da,
    bu değiştiriciler yerine <literal>var</literal> sözcüğünü kullanmaktır.
   </para>
  </note>
  <note>
   <simpara>
    <link linkend="language.oop5.visibility">Görünürlük</link> sözcüklerinden
    biri kullanılmadan bildirilen bir özellik <literal>public</literal> olarak
    bildirilmiş olur.
   </simpara>
  </note>
  <para>
   Statik olmayan özelliklere, yöntemleri içinden <literal>-&gt;</literal>
   (Nesne İşleci): <varname>$this-&gt;özellik</varname> (burada
   <literal>özellik</literal> özelliğin ismidir) kullanarak erişilir. Statik
   özelliklere ise <literal>::</literal> (Çift İki nokta imi):
   <varname>self::özellik</varname> kullanarak erişilir. Statik ve statik
   olmayan özellikler arasıdaki fark hakkında daha  ayrıntılı bilgi için
   <xref linkend="language.oop5.static" /> bölümüne bakınız.
  </para>
  <para>
   Yöntem bir nesne bağlamından çağrılıyorsa  <varname>$this</varname> sözde
   değişkeni sınıf yöntemleri içinde de kullanılabilir.
   <varname>$this</varname>, yöntemi çağıran nesnenin değeridir.
  </para>

  <para>
   <example>
    <title>- Özellik bildirimi</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';

   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;

   // geçersiz özellik bildirimleri:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // geçerli özellik bildirimleri:
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
hello world
EOD;

   // Örtük public bildirim:
   static $var9;
   readonly int $var10;
   var $var11;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Sınıflar ve nesnelerle çalışan bazı işlevler vardır. Bunlar için
    <xref linkend="ref.classobj" /> bölümüne bakınız.
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Tür Bildirimleri</title>
   <para>
    PHP 7.4.0 ve sonrasında özellik tanımı <type>callable</type>
    istisnası ile <link linkend="language.types.declarations">tür
    bildirimi</link> içerebilmektedir.
    <example>
     <title>- Tür ile özellik bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Tür bildirimli özellikler erişilmeden önce ilklendirilmelidir, aksi
    takdirde bir <classname>Error</classname> yavrulanır.
    <example>
      <title>- Özelliklere erişim</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.properties.readonly-properties">
   <title>Salt-okunur Özellikler</title>
   <para>
    PHP 8.1.0 itibariyle, bir özellik <code>readonly</code> ile
    bildirilebilmekte ve böylece ilklendirmeden sonra özellik üzerinde
    değişiklik yapılması engellenebilmektedir.
    <example>
     <title>- Salt-okunur özellik örneği</title>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
   public readonly string $prop;

   public function __construct(string $prop) {
       // Geçerli ilklendirme
       $this->prop = $prop;
   }
}
// dolaylı ilklendirme
$test = new Test("foobar");
// Geçerli değerin okunması
var_dump($test->prop); // string(6) "foobar"

// Geçersiz atama. Aynı değer yeniden atanıyor olsa bile geçerli değil.
$test->prop = "foobar";
// Hata: Salt-okunur özellik Test::$prop üzerinde değişiklik yapılamaz
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      <code>readonly</code> betimleyicisi sadece <link
      linkend="language.oop5.properties.typed-properties">özelliklere veri türü
      bildirimi yapılırken</link> uygulanabilir. Bir salt-okunur özelliği veri
      türü kısıtlaması olmaksızın bildirmek için
      <xref linkend="language.types.mixed"/> türü kullanılabilir.
     </para>
    </note>
    <note>
     <para>
      Salt-okunur statik özellikler desteklenmemektedir.
     </para>
    </note>
   </para>
   <para>
    Bir salt-okunur özellik yalnızca bir kere, sadece bildirildiği bağlamda
    ilklendirilebilir ve bunun dışındaki her türlü ilklendirme ya da değişiklik
    hata ile sonuçlanır (<classname>Error</classname> istisnası yavrulanır).
    <example>
     <title>- Salt-okunur özelliklerde hatalı ilklendirme örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
class Test1 {
    public readonly string $prop;
}

$test1 = new Test1;
// Özel bağlamı dışında (küresel bağlamda) ilklendirme hatası
$test1->prop = "foobar";
// Error: Cannot initialize readonly property Test1::$prop from global scope
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Salt-okunur özelliklerde öntanımlı değerin açıkça belirtilmesine izin
     verilmez. Çünkü, salt-okunur bir özelliği bir değerle bildirmek, özünde
     bir sabitten farksız olduğundan bu yararsızdır.
     <example>
      <programlisting role="php">
<![CDATA[
<?php

class Test {
    // Ölümcül hata: Salt-okunur özellik Test::$prop öntanımlı değere sahip olamaz
    public readonly int $prop = 42;
}
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <note>
    <para>
     Salt-okunur özellikler ilklendirildikten sonra <function>unset</function>
     gibi bir işlevle yok edilemez. Bu ancak, özelliğin bildirildiği bağlamda,
     ilklendirilmeden önce mümkündür.
    </para>
   </note>
   <para>
    Aşağıdaki gibi düz atamalarla yapılmayan değişiklikler de
    <classname>Error</classname> istisnasına yol açar:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}

$test = new Test;
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Bununla birlikte salt-okunur özellikler, içerik değişikliğini engellemez.
    Nesneler (veya özkaynaklar) salt-okunur özelliklerde saklansa bile
    içerikleri değiştirilebilir:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
    public function __construct(public readonly object $obj) {}
}

$test = new Test(new stdClass);
// Geçerli içerik değişikliği.
$test->obj->foo = 1;
// Geçersiz atama
$test->obj = new stdClass;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.properties.dynamic-properties">
   <title>Dinamik özellikler</title>
   <para>
    Bir nesnede mevcut olmayan bir özelliğe atama yapılmaya çalışılırsa PHP
    olmayan özelliği otomatik olarak oluşturmaya çalışır. Böyle dinamik
    olarak oluşturulan bir özellik sınıfın <emphasis>yalnızca</emphasis>
    bu nesnesinde kullanılabilir.
   </para>

   <warning>
    <simpara>
     PHP 8.2.0 ve sonrasında dinamik özelliklerin kullanımı önerilmemektedir.
     Özelliğe atama yapmadan önce bildirilmesi önerilir. Keyfi özellik
     isimlerini işleme sokabilmek için sınıfın sihirli
     <link linkend="object.get">__get()</link> ve
     <link linkend="object.set">__set()</link> yöntemlerini gerçeklemesi
     gerekir. Son çare olarak, sınıf <code>#[\AllowDynamicProperties]</code>
     özelliği ile imlenebilir.
    </simpara>
   </warning>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
