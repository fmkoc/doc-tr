<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f012b2761819e0ab25ff8cf4bac6655cfbc6fcff Maintainer: nilgun Status: ready -->
<!-- CREDITS: oguzc -->
 <chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Etkin ve Güvenilir olarak Parola Aşlama</title>
  <titleabbrev>Parola Aşlama</titleabbrev>

  <simpara>
   Bu bölümde, parolaları güvenlik altına alma da kullanılan
   aşlama (hashing) işlevinin arka planı ve etkin şekilde nasıl
   uygulanabileceği ele alınacaktır.
  </simpara>

  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <simpara>
      Kullanıcıların girmiş olduğu parolalar neden aşlanmalı?
     </simpara>
    </question>
    <answer>
     <simpara>
      Parola aşlama, kullanıcıların parola girerek kullandıkları bir
      uygulamanın tasarımında, mutlaka göz önüne alınması gereken en
      temel güvenlik faktörlerinden birisidir. Parola aşlama tekniği
      kullanılmadığı takdirde, uygulamanızın veri tabanında saklanan
      her türlü parola veritabanınızı ele geçirenler tarafından çalınabilir
      ve ardından sadece uygulama değil, aynı parolayı başka hizmetler
      için kullanıyorlarsa uygulamayı kullanan kullanıcılar da risk altında
      kalır.
     </simpara>
     <simpara>
      Kullanıcıların parolalarını veri tabanına kaydetmeden önce,
      uygulanan aşlama algoritması ile saldırganın özgün parolayı
      tahminini imkansız kılınırken, ilerleyen süreçte de özgün parolayı
      bulma çabaları da (kaba kuvvet saldırısı tekniğiyle) zorlaştırılmış
      olur.
     </simpara>
     <simpara>
      Ancak, dikkat edilmesi gereken önemli nokta, parola aşlama sadece
      veri kaynağının ele geçirilmesine karşı koruma sağlarken, uygulamanın
      istem dışında yerleştirilmiş zararlı kodları aracılığıyla parolaların
      ele geçirilmesine karşı koruma sağlamaz.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <simpara>
      <function>MD5</function> ve <function>SHA1</function> gibi genel
      aşlama işlevlerini parolalar için kullanmak neden uygun değildir?
     </simpara>
    </question>
    <answer>
     <simpara>
      MD5, SHA1 ve SHA256 gibi aşlama algoritmaları verimli ve çok hızlı
      olmaları için tasarlanmıştır. Modern teknikler ve bilgisayar
      ekipmanları ile, Kaba kuvvet (brute force) atak tekniği kullanarak özgün
      değere ulaşmak sıradan bir hale gelmiştir.
     </simpara>
     <simpara>
      Çünkü, modern bir bilgisayar, oldukça hızlı olarak bu aşlama
      tekniklerini <quote>tersine</quote> çevirir, çoğu güvenlik uzmanı da
      bunların parola aşlama da kullanımına  karşı aleyhte tavsiye de bulunur.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <simpara>
      Genel aşlama teknikleri kullanışlı olmadıklarına göre,
      parolalarımı nasıl aşlamalıyım?
     </simpara>
    </question>
    <answer>
     <simpara>
      Parolaları aşlamada, dikkate alınması gereken iki husus vardır;
      hesaplamanın maliyeti ve tuzlama.
      aşlama algoritmasında daha fazla hesaplama maliyeti demek
      kaba kuvvet ataklarının daha fazla zaman gerektirmesi demektir.
     </simpara>
     <simpara>
      PHP, güvenli bir şekilde
      <link linkend="function.password-hash">aşlama</link> ve
      <link linkend="function.password-verify">parola doğrulamayı</link>
      birlikte güvenle sağlayan bir <link linkend="book.password">yerel parola
      aşlama arayüzü</link> sağlamaktadır.
     </simpara>
     <simpara>
      Parola aşlama da Blowfish algoritmasının kullanılması önerilir,
      parola aşlama APIsi tarafından da öntanımlı olarak kullanılan bu
      algoritma MD5 veya SHA1 den daha fazla hesaplama gerektirmesine rağmen
      hala ölçeklenebilir durumdadır.
     </simpara>
     <simpara>
      Parola aşlama için <function>crypt</function> işlevi de kullanılabilirse
      de, bunun yalnızca diğer işletim sistemleriyle bir arada çalışabilirlik
      adına yapılması önerilir. Bunun yerine mümkün olduğunca
      <link linkend="book.password">yerleşik parola aşlama arayüzünün</link>
      kullanılması şiddetle önerilir.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <simpara>
      Tuzlama nedir?
     </simpara>
    </question>
    <answer>
     <simpara>
      Bir şifreleme tuzu, gökkuşağı tablosu olarak bilinen, daha önceden
      hesaplanarak oluşturulmuş aşlama listesinden karşılaştırma yaparak
      eşleştirme ihtimalini ortadan kaldırmak için, aşlama işlemi esnasında
      uygulanan bir değerdir.
     </simpara>
     <simpara>
      Basit anlamda tuz, haşlanmış değerinizi kırma teşebbüslerini
      zorlaştırmada kullanılan ek bir veridir. İnternet üzerinde, daha önceden
      hesaplanmış kapsamlı aşlama değerlerinin yanı sıra özgün değerleri de
      barındıran bir dizi liste hizmeti vardır. Tuz kullanmak bu listelerden
      aşlama değerini bulmayı mantıksız veya imkansız kılar.
     </simpara>
     <simpara>
      Bir tane sağlanmamışsa <function>password_hash</function> rasgele bir
      tuz oluşturacaktır ve bu genelde en kolay ve en güvenilir yaklaşımdır.
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.password.storing-salts">
    <question>
     <simpara>
      Tuzlar nasıl saklanmalı?
     </simpara>
    </question>
    <answer>
     <simpara>
      <function>password_hash</function> veya <function>crypt</function>
      işlevini kullanırken, dönen değer üretilen aşlanmış parola olup tuzu
      da içerir. Parolaları doğrularken <function>password_verify</function>
      veya <function>crypt</function> işlevine doğrudan verilebilecek şekilde
      aşlama bilgisini içeren bu değer veritabanında hiç değiştirilmeden
      harfi harfine saklanmalıdır.
     </simpara>
     <warning>
      <simpara>
       Zamanlama saldırılarından kaçınmak için, yeniden aşlama işlemi yapıp
       sonucu depolanmış bir aş ile karşılaştırmak yerine her zaman
       <function>password_verify</function> kullanılmalıdır.
      </simpara>
     </warning>
     <simpara>
      Aşağıdaki şekil, <function>crypt</function> veya
      <function>password_hash</function> işlevinden dönen değerin biçimini
      gösterir. Görüleceği gibi, ileriki bir parola doğrulaması için
      gereken tuzu ve algoritma ile ilgili tüm bilgiyi içinde barındırmaktadır.
     </simpara>
     <mediaobject>
      <alt>
       password_hash veya crypt işlevinden dönen değerin bileşenleri:
       sırasıyla, seçilen algoritma, algoritmanın seçenekleri, kullanılan tuz
       ve aşlanmış parola.
      </alt>
      <imageobject>
       <imagedata fileref="en/faq/figures/crypt-text-rendered.svg" width="690"
       depth="192" format="SVG" />
      </imageobject>
     </mediaobject>
    </answer>
   </qandaentry>
  </qandaset>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
