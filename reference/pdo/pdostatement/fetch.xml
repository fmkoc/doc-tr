<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: daf4cc624df3c21d472149725feb377b1beedb04 Maintainer: nilgun Status: ready -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>Sonuç kümesindeki sonraki satırı döndürür</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>kip</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>göst_yönü</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>göst_başlangıcı</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   PDOStatement nesnesi ile ilişkili sonuç kümesinden bir sonraki satırı
   döndürür. <parameter>kip</parameter> bağımsız değişkeni ile PDO'nun satırı
   nasıl döndüreceği belirtilir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>kip</parameter></term>
     <listitem>
      <para>
       Sonrakı satırın nasıl döndürüleceğini belirtmek için kullanılır.
       <literal>PDO::FETCH_*</literal> sabitlerinden biri olmalıdır.
       <constant>PDO::FETCH_DEFAULT</constant> öntanımlı değerdir.
       <itemizedlist>
        <listitem><para>
         <constant>PDO::FETCH_ASSOC</constant>: Sütun isimlerine indisli
         bir dizi döner.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_BOTH</constant> (öntanımlı): Hem sütun
         isimlerine hem de sütun numaralarına göre indislenmiş bir dizi döner.
         İlk sütunun indisi 0'dır.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_BOUND</constant>: Sütun değerlerini
         <methodname>PDOStatement::bindColumn</methodname> ile ilişkilendirilmiş
         PHP değişkenlerine atar ve &true; döndürür.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_CLASS</constant>: İstenen sınıfın özelliklerini
         sütun isimlerine eşleyerek sınıfın bir örneğini döndürür ve
         <literal>PDO::FETCH_PROPS_LATE</literal> ayrıca belirtilmemişse
         ardından kurucu çağrılır. Eğer <parameter>kip</parameter> bağımsız değişkeni
         <constant>PDO::FETCH_CLASSTYPE</constant> sabitini içeriyorsa (örn,
         <literal>PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE</literal>) sınıf
         ismi ilk sütunun değerine göre belirlenir.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_INTO</constant>: İstenen sınıfın mevcut örneğini
         sütun isimlerini sınıf özelliklerine eşleyerek günceller.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_LAZY</constant>:
         <constant>PDO::FETCH_BOTH</constant> ve
         <constant>PDO::FETCH_OBJ</constant> sabitlerinin birleşimidir ve
         erişildikçe nesne özellik adlarını oluşturan bir
         <classname>PDORow</classname> nesnesi döndürür.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_NAMED</constant>: Aynı isimde birden fazla sütun
         olmaması şartıyla <constant>PDO::FETCH_ASSOC</constant> sabitindeki
         gibi bir dizi döndürür. Bir anahtar tarafından atıfta bulunulan değer,
         anahtarla aynı isimli sütundaki tüm değerlerin dizisini içerecektir.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_NUM</constant>: Sütun numaralarına göre
         indislenmiş bir dizi döner. İlk sütunun indisi 0'dır.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_OBJ</constant>: Özellik isimlerinin sınıf
         isimlerine denk düştüğü bir anonim nesne örneği döndürür.
        </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_PROPS_LATE</constant>:
         <constant>PDO::FETCH_CLASS</constant> ile birlikte kullanıldığında,
         özellikler ilgili sütundaki değerlere atanmadan önce sınıf kurucusu
         çağrılır.
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>göst_yönü</parameter></term>
     <listitem>
      <para>
       Kaydırılabilir göstericili bir PDOStatement nesnesi
       için, bu değer hangi satırın döndürüleceğini belirler.
       <literal>PDO::FETCH_ORI_*</literal> sabitlerinden biri olmalıdır.
       <constant>PDO::FETCH_ORI_NEXT</constant> öntanımlı değerdir.
       PDOStatement nesnenize bir kaydırılabilir gösterici isteği yapmak için
       SQL deyimini <methodname>PDO::prepare</methodname> ile hazırlarken
       <constant>PDO::CURSOR_SCROLL</constant> özelliğine
       <constant>PDO::ATTR_CURSOR</constant> özniteliğini atamalısınız.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>göst_başlangıcı</parameter></term>
     <listitem>
      <para>
       Kaydırılabilir göstericili bir PDOStatement nesnesi
       için <parameter>göst_yönü</parameter> bağımsız değişkeninde
       <constant>PDO::FETCH_ORI_ABS</constant> belirtilirse bu değer sonuç
       kümesinden alınacak mutlak satır numarasını belirler.
      </para>
      <para>
       Kaydırılabilir göstericili bir PDOStatement nesnesi
       için <parameter>göst_yönü</parameter> bağımsız değişkeninde
       <constant>PDO::FETCH_ORI_REL</constant> belirtilirse bu değer alınacak
       satırı bir önceki <methodname>PDOStatement::fetch</methodname>
       çağrısındaki gösterici konumuna göreli olarak belirler.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bu işlevin dönüş değeri alım türüne bağlıdır. Başarısızlık durumunda veya
   döndürülecek satır kalmamışsa &false; döner.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- Farklı kiplerle satırların döndürülmesi</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT ad, renk FROM meyveler");
$sth->execute();

/* PDOStatement::fetch tarzlarını deneyelim */
print "PDO::FETCH_ASSOC:\n";
print "Sütun isimlerine göre indisli bir dizi olarak:\n";
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print "PDO::FETCH_BOTH:\n";
print "Sütun isimlerine ve numaralarına göre indisli bir dizi olarak:\n";
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print "\n";

print "PDO::FETCH_LAZY:\n";
echo "Her özelliğin bir sütun ismine denk düştüğü bir PDORow nesnesi olarak:\n";
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print "\n";

print "PDO::FETCH_OBJ:\n";
echo "Her özelliğin bir sütun ismine denk düştüğü bir anonim nesne olarak:\n";
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->ad;
print "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC:
Sütun isimlerine göre indisli bir dizi olarak:
Array
(
    [ad] => elma
    [renk] => kırmızı
)

PDO::FETCH_BOTH:
Sütun isimlerine ve numaralarına göre indisli bir dizi olarak:
Array
(
    [ad] => muz
    [0] => muz
    [renk] => sarı
    [1] => sarı
)

PDO::FETCH_LAZY:
Her özelliğin bir sütun ismine denk düştüğü bir PDORow nesnesi olarak:
PDORow Object
(
    [ad] => portakal
    [renk] => turuncu
)

PDO::FETCH_OBJ:
Her özelliğin bir sütun ismine denk düştüğü bir anonim nesne olarak:
kivi
]]>
    </screen>
   </example>
   <example>
    <title>- Satırları bir kaydırılabilir gösterici ile döndürmek</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql,
              array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
   $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
   $stmt = $dbh->prepare($sql,
              array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "İleriye doğru okuma:\n";
readDataForwards($conn);

print "Geriye doğru okuma:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
İleriye doğru okuma:
21    10    5
16    0     5
19    20    10

Geriye doğru okuma:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>
   <example><title>- Oluşturma sırası</title>
    <simpara>
     Nesneler <literal>PDO::FETCH_CLASS</literal> üzerinden alındığında,
     önce nesne özellikleri atanır, ardından sınıf kurucusu çağrılır. Ek
     olarak <literal>PDO::FETCH_PROPS_LATE</literal> sabiti de belirtilmişse,
     bu sıra tersine döner, yani önce kurucu çağrılır ardından özellikler
     atanır.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "Ben {$this->name}.\n";
        } else {
            echo "Henüz adım yok.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Ben Ali.
Ben Ali.
Henüz adım yok.
Ben Veli.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
