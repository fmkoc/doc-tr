<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 33968dfebb9b847733d02ee221b3b8054a101b41 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.array-map" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_map</refname>
  <refpurpose>Belirtilen dizilerin elemanlarına geriçağırım işlevini uygular
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_map</methodname>
   <methodparam><type class="union"><type>callable</type><type>null</type></type><parameter>işlev</parameter></methodparam>
   <methodparam><type>array</type><parameter>dizi</parameter></methodparam>
   <methodparam rep="repeat"><type>array</type><parameter>diziler</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_map</function> işlevi belirtilen dizinin
   (<parameter>diziler</parameter> ile daha fazla dizi belirtilmişse, onların
   da) ilgili elemanlarının her birine <parameter>işlev</parameter> geri
   çağırım işlevini uygulayıp sonucu bir dizi olarak döndürür. Geriçağırım
   işlevinin bağımsız değişken sayısı <function>array_map</function> işlevine
   aktarılan bağımsız değişken sayısını kabul edebilmelidir. Fazladan belirtilen
   diziler yok sayılır. Bağımsız değişken sayısı yetersizse
   <classname>ArgumentCountError</classname> yavrulanır.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>işlev</parameter></term>
     <listitem>
      <para>
       Her dizinin her elemanına uygulanacak <type>callable</type> türünde
       geri çağırım işlevi.
      </para>
      <para>
       Çok sayıda diziye bir zip işlemi uygulamak için
       <parameter>işlev</parameter>'e değer olarak &null; aktarılabilir ve
       her biri aynı indisin girdi dizilerinin elemanlarını tutan bir dizi
       döndürür (aşağıdaki örneğe bakın). Sadece <parameter>dizi</parameter>
       sağlanmışsa, <methodname>array_map</methodname> girilen diziyle döner.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dizi</parameter></term>
     <listitem>
      <para>
       Elemanları <parameter>işlev</parameter> tarafından işlenecek ilk dizi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>diziler</parameter></term>
     <listitem>
      <para>
        Elemanları <parameter>işlev</parameter> tarafından işlenecek diğer
        dizilerin ek değişken listesi.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>array_map</function> işlevi belirtilen dizinin
   (<parameter>diziler</parameter> ile daha fazla dizi belirtilmişse, onların
   da) ilgili elemanlarının her birine <parameter>işlev</parameter> geri çağırım
   işlevini uygulayıp sonucu bir dizi olarak döndürür.
  </para>
  <para>
   Döndürülen dizi, yalnız ve yalnız tek bir dizi aktarılırsa, dizi
   bağımsız değişkeninin anahtarlarını korur. Birden fazla dizi aktarılırsa,
   döndürülen dizi sıralı tamsayı anahtarlara sahip olacaktır.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &array.changelog.by-ref;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>array_map</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function cube($n)
{
    return ($n * $n * $n);
}

$a = [1, 2, 3, 4, 5];
$b = array_map('cube', $a);
print_r($b);
?>
]]>
    </programlisting>
    <para>
     <varname>$b</varname> şöyle olur:
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Lamda işlevi kullanan <function>array_map</function> örneği
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$func = function(int $deger): int {
    return $deger * 2;
};

print_r(array_map($func, range(1, 5)));

// Veya PHP 7.4.0 ve sonrasında:

print_r(array_map(fn($value): int => $value * 2, range(1, 5)));

?>
]]>
    </programlisting>
    <screen>
<![CDATA[
Array
(
    [0] => 2
    [1] => 4
    [2] => 6
    [3] => 8
    [4] => 10
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Birden fazla diziyle <function>array_map</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function show_Spanish(int $n, string $m): string
{
    return("İspanyolcada {$n} sayısının ismi: {$m}");
}

function map_Spanish(int $n, string $m): array
{
    return [$n => $m];
}

$a = [1, 2, 3, 4, 5];
$b = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$c = array_map('show_Spanish', $a, $b);
print_r($c);

$d = array_map('map_Spanish', $a , $b);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// $c çıktısı
Array
(
    [0] => İspanyolcada 1 sayısının ismi: uno
    [1] => İspanyolcada 2 sayısının ismi: dos
    [2] => İspanyolcada 3 sayısının ismi: tres
    [3] => İspanyolcada 4 sayısının ismi: cuatro
    [4] => İspanyolcada 5 sayısının ismi: cinco
)

// $d çıktısı
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   İki veya daha fazla sayıda dizi kullanırken işlev elemanlara karşılıklı
   uygulanacağından normal olarak dizilerin eleman sayılarının eşit olması
   gerekir. Eğer bu eşitlik yoksa, kısa olanlar boş elemanlar eklenerek en
   uzun olanın boyuna eşitlenir
  </para>
  <para>
   Bu işlevin ilginç bir kullanımı da, geriçağırım işlevi ismi olarak &null;
   belirterek bir diziler dizisi oluşturmaktır.
  </para>
  <para>
   <example>
    <title>- Dizileri ziplemek</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = [1, 2, 3, 4, 5];
$b = ['one', 'two', 'three', 'four', 'five'];
$c = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => bir
        )

    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => iki
        )

    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => üç
        )

    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => dört
        )

    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => beş
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Tek <parameter>dizi</parameter> ile
     &null; <parameter>işlev</parameter>

    </title>
    <programlisting role="php">
<![CDATA[
<?php
$array = [1, 2, 3];
var_dump(array_map(null, $array));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Dizgesel anahtarlarla <function>array_map</function> örneği
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = ['anahtar' => 'değer'];
function cb1($a) {
    return [$a];
}
function cb2($a, $b) {
    return [$a, $b];
}
var_dump(array_map('cb1', $arr));
var_dump(array_map('cb2', $arr, $arr));
var_dump(array_map(null,  $arr));
var_dump(array_map(null, $arr, $arr));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["anahtar"]=>
  array(1) {
    [0]=>
    string(5) "deger"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "deger"
    [1]=>
    string(5) "deger"
  }
}
array(1) {
  ["stringkey"]=>
  string(5) "deger"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "deger"
    [1]=>
    string(5) "deger"
  }
}
]]>
    </screen>
   </example>
   <example>
    <title>- <function>array_map</function> ve ilişkisel diziler</title>
    <para>
     <function>array_map</function> dizi anahtarlarının doğrudan girdi olarak
     kullanımını desteklemese de <function>array_keys</function> kullanılarak
     bu yapılabilir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [
    'v1' => 'ilk sürüm',
    'v2' => 'ikinci sürüm',
    'v3' => 'üçüncü sürüm',
];

// Bilgi: 7.4.0 öncesinde, anonim işlevler için bunun yerine uzun
// sözdizimi kullanılırdı.
$callback = fn(string $k, string $v): string => "$k $v idi";

$result = array_map($callback, array_keys($arr), array_values($arr));

var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(24) "v1 ilk sürüm idi"
  [1]=>
  string(25) "v2 ikinci sürüm idi"
  [2]=>
  string(24) "v3 üçüncü sürüm idi"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_filter</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
